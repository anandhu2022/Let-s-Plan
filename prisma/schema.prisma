generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int           @id @default(autoincrement())
  first_name    String?
  middle_name   String?
  last_name     String?
  username      String
  mobile        String?
  email         String        @unique
  passwordHash  String
  accountStatus String
  registerdAt   DateTime      @default(now())
  roleId        Int?
  role          Role?         @relation(fields: [roleId], references: [id])
  TeamMember    TeamMember[]
  Project       Project[]
  session       session[]
  activity      activity[]
  assignedTasks Task[]        @relation(name: "assignedUser")
  createdTasks  Task[]        @relation(name: "creator")
  UpdatedTask   Task[]        @relation(name: "updatedBy")
  comments      comments[]
  userStory     userStory[]
  permissions   permissions[]
}

model Role {
  id          Int           @id @default(autoincrement())
  name        String        @unique
  Users       User[]
  TeamMember  TeamMember[]
  permissions permissions[]
}

model Priority {
  id      Int       @id @default(autoincrement())
  name    String    @unique
  Project Project[]
  Task    Task[]
}

model ClientPartner {
  id            Int             @id @default(autoincrement())
  name          String          @unique
  details       String
  Project       Project[]
  ClientContact ClientContact[]
}

model ClientContact {
  id            Int           @id @default(autoincrement())
  clientId      Int
  contactType   String
  contactId     String
  clientPartner ClientPartner @relation(fields: [clientId], references: [id])
  Project       Project[]
}

model Project {
  id                 Int            @id @default(autoincrement())
  title              String         @unique
  plannedStartDate   String?
  plannedEndDate     String?
  actualStartDate    String?
  actualEndDate      String?
  projectDescription String
  clientId           Int?
  priorityId         Int
  statusId           Int
  priority           Priority       @relation(fields: [priorityId], references: [id])
  clientPartner      ClientPartner? @relation(fields: [clientId], references: [id])
  Team               Team[]
  ClientContact      ClientContact? @relation(fields: [clientContactId], references: [id])
  clientContactId    Int?
  Task               Task[]
  comments           comments[]
  userStory          userStory[]
  User               User?          @relation(fields: [userId], references: [id])
  userId             Int?
  status             Status         @relation(fields: [statusId], references: [id])
}

model Team {
  id         Int          @id @default(autoincrement())
  title      String       @unique
  projectId  Int
  project    Project      @relation(fields: [projectId], references: [id])
  TeamMember TeamMember[]
}

model TeamMember {
  id     Int  @id @default(autoincrement())
  userId Int
  teamId Int
  roleId Int
  user   User @relation(fields: [userId], references: [id])
  role   Role @relation(fields: [roleId], references: [id])
  Team   Team @relation(fields: [teamId], references: [id])
}

model session {
  id        Int      @id @default(autoincrement())
  userId    Int
  sessionId String   @unique
  ipAddress String
  createdAt DateTime @default(now())
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id])
}

model activity {
  id           Int      @id @default(autoincrement())
  userId       Int
  taskId       Int
  activityType String
  activityData String
  createdAt    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id])
  task         Task     @relation(fields: [taskId], references: [id])
}

model Task {
  id               Int         @id @default(autoincrement())
  title            String      @unique
  description      String
  projectId        Int
  userId           Int
  createdBy        Int
  updatedBy        Int
  statusId         Int
  estimatedTime    Decimal
  completionTime   Decimal
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  plannedStartDate DateTime
  plannedEndDate   DateTime
  actualStartDate  DateTime
  actualEndDate    DateTime
  priorityId       Int
  project          Project     @relation(fields: [projectId], references: [id])
  assignedUser     User        @relation(fields: [userId], references: [id], name: "assignedUser")
  createdByUser    User        @relation(fields: [createdBy], references: [id], name: "creator")
  updatedByUser    User        @relation(fields: [updatedBy], references: [id], name: "updatedBy")
  status           Status      @relation(fields: [statusId], references: [id])
  priority         Priority    @relation(fields: [priorityId], references: [id])
  activity         activity[]
  comments         comments[]
  userStory        userStory[]
}

model Status {
  id      Int       @id @default(autoincrement())
  name    String    @unique
  task    Task[]
  Project Project[]
}

model comments {
  id        Int      @id @default(autoincrement())
  comment   String
  taskId    Int
  projectId Int
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  task      Task     @relation(fields: [taskId], references: [id])
  project   Project  @relation(fields: [projectId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model userStory {
  id          Int      @id @default(autoincrement())
  title       String   @unique
  description String
  projectId   Int
  taskId      Int
  userId      Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  project     Project  @relation(fields: [projectId], references: [id])
  task        Task     @relation(fields: [taskId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
}

model permissions {
  id     Int    @id @default(autoincrement())
  name   String @unique
  roleId Int
  userId Int
  role   Role   @relation(fields: [roleId], references: [id])
  user   User   @relation(fields: [userId], references: [id])
}
